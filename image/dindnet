#!/bin/bash
# Copyright 2017 Mirantis
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
set -x

IP_CIDR=$(ip addr show eth0 | grep -w inet | awk '{ print $2; }')
IP=$(echo $IP_CIDR | sed 's,/.*,,')

function dind::setup-bridge {
  # create dind0 bridge and attach it to the veth interface eth0
  brctl addbr dind0
  brctl addif dind0 eth0
  ip link set dind0 up
  
  # move ip to the bridge and restore routing via the old gateway
  DEFAULT_ROUTE=$(ip route | grep default | sed 's/eth0/dind0/')
  
  ip addr del $IP_CIDR dev eth0
  ip addr add $IP_CIDR dev dind0
  ip route add $DEFAULT_ROUTE

}

function dind::setup-config-file {
  # compute a network for the containers to live in
  # by adding CNI_BRIDGE_NETWORK_OFFSET to the current IP and cutting off
  # non-network bits according to CNI_BRIDGE_NETWORK_SIZE
  CNI_BRIDGE_NETWORK_SIZE=${CNI_BRIDGE_NETWORK_SIZE:-24}
  NETWORK=$(ip route | grep dind0 | grep -v default | sed 's,/.*,,')
  NETWORK_SIZE=$(echo $IP_CIDR | sed 's,.*/,,')
  
  DEFAULT_GW=$(ip route | grep default | sed 's/eth0/dind0/' | awk '{print $3;}')

  WILDCARD=$(ipcalc $IP_CIDR | grep Wildcard | awk '{print $2;}')
  IFS=. read -r i1 i2 i3 i4 <<< ${IP}
  IFS=. read -r n1 n2 n3 n4 <<< ${NETWORK}
  IFS=. read -r o1 o2 o3 o4 <<< ${CNI_BRIDGE_NETWORK_OFFSET}
  IFS=. read -r w1 w2 w3 w4 <<< ${WILDCARD}
  
  IP_PLUS_OFFSET=$(printf "%d.%d.%d.%d\n" \
                          "$(( n1 + ((i1 - n1 + o1) & w1) ))" \
                          "$(( n2 + ((i2 - n2 + o2) & w2) ))" \
                          "$(( n3 + ((i3 - n3 + o3) & w3) ))" \
                          "$(( n4 + ((i4 - n4 + o4) & w4) ))")
  
  HOST_MIN=$(ipcalc $IP_PLUS_OFFSET/$CNI_BRIDGE_NETWORK_SIZE | grep HostMin | awk '{print $2;}')
  HOST_MAX=$(ipcalc $IP_PLUS_OFFSET/$CNI_BRIDGE_NETWORK_SIZE | grep HostMax | awk '{print $2;}')
  echo "Using ${HOST_MIN} .. ${HOST_MAX} for docker containers"
  
  cat >/etc/cni/net.d/cni.conf <<EOF
{
    "name": "dindnet",
    "type": "bridge",
    "bridge": "dind0",
    "ipam": {
        "type": "host-local",
        "subnet": "${NETWORK}/${NETWORK_SIZE}",
        "rangeStart": "${HOST_MIN}",
        "rangeEnd": "${HOST_MAX}",
        "gateway": "${DEFAULT_GW}",
        "routes": [
            { "dst": "0.0.0.0/0" }
        ]
    }
}
EOF
}

function dind::do-v6 {
  if [[ $IP_MODE = "dualstack" || $IP_MODE = "ipv6" ]]; then
    true
  else
    false
  fi
}

function dind::do-v4 {
  if [[ $IP_MODE = "dualstack" || $IP_MODE = "ipv4" ]]; then
    true
  else
    false
  fi
}

function dind::setup-new-config-file {
  INSTANCE=`hostname | cut -d"-" -f 3`
  if [[ $INSTANCE = "" ]]; then
      INSTANCE="0"
  fi
  echo "Instance: ${INSTANCE}"

  # Build config file for container network(s)
  CONF_FILE=/etc/cni/net.d/10-bridge.conf
  cat >$CONF_FILE <<PREFIX_EOF
{
  "cniVersion": "0.3.0",
  "name": "dindnet",
  "type": "bridge",
  "bridge": "cbr0",
  "isDefaultGateway": true,
  "ipMasq": false,
  "ipam": {
    "type": "host-local",
    "ranges": [
PREFIX_EOF

  if dind::do-v4 ; then
    POD_NET_V4_SUBNET="${POD_NET_V4_CIDR_PREFIX}.${INSTANCE}.0/24"
    POD_NET_V4_GW="${POD_NET_V4_CIDR_PREFIX}.${INSTANCE}.1"
    cat >>$CONF_FILE <<V4_SUBNET_EOF
      {
        "subnet": "${POD_NET_V4_SUBNET}",
        "gateway": "${POD_NET_V4_GW}"
V4_SUBNET_EOF
    if dind::do-v6 ; then
      echo "      }," >>$CONF_FILE
    else
      echo "      }" >>$CONF_FILE
    fi
  fi

  if dind::do-v6 ; then
    POD_NET_V6_SUBNET="${POD_NET_V6_CIDR_PREFIX}:${INSTANCE}::/64"
    POD_NET_V6_GW="${POD_NET_V6_CIDR_PREFIX}:${INSTANCE}::1"
    cat >>$CONF_FILE <<V6_SUBNET_EOF
      {
        "subnet": "${POD_NET_V6_SUBNET}",
        "gateway": "${POD_NET_V6_GW}"
      }
V6_SUBNET_EOF
  fi
  cat >>$CONF_FILE <<SUFFIX_EOF
    ]
  }
}
SUFFIX_EOF

}


if [[ "${CNI_BRIDGE_NETWORK_OFFSET:-}" ]]; then
  dind::setup-bridge
  if [[ $IP_MODE = "legacy" ]]; then
    dind::setup-config-file
  else
    # TODO: Remove, once DinD is able to use v0.6.0 CNI release
    if dind::do-v6 ; then
      sysctl -w net.ipv6.conf.all.disable_ipv6=0
    fi
    curl -sSL --retry 5 https://github.com/containernetworking/plugins/releases/download/v0.6.0-rc1/cni-plugins-amd64-v0.6.0-rc1.tgz | \
	tar -C /opt/cni/bin -xz
    dind::setup-new-config-file
  fi
fi

# make docker's kube-dns friendly
old_ns="$(awk '/^nameserver/ {print $2; exit}' /etc/resolv.conf)"
if [[ ${old_ns} ]]; then
  # sed -i doesn't work here because of docker's handling of /etc/resolv.conf
  sed "s/^nameserver.*/nameserver ${IP}/" /etc/resolv.conf >/etc/resolv.conf.updated
  cat /etc/resolv.conf.updated >/etc/resolv.conf
  # rm /tmp/resolv.conf.updated
  while true; do
    socat udp4-recvfrom:53,reuseaddr,fork,bind=${IP} UDP:${old_ns}:53 || true
    echo "WARNING: restarting socat" >&2
  done
else
  echo "WARNING: couldn't get nameserver" >&2
  exit 1  
fi
