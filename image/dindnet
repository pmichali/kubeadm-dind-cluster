#!/bin/bash
# Copyright 2017 Mirantis
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
set -x


IPV4_CIDR="$(ip addr show eth0 | grep -w inet | awk '{ print $2; }')"
IPV4="$(echo ${IPV4_CIDR} | sed 's,/.*,,')"

function dind::setup-bridge {
  # create dind0 bridge and attach it to the veth interface eth0
  brctl addbr dind0
  brctl addif dind0 eth0
  ip link set dind0 up

  ip addr del ${IPV4_CIDR} dev eth0
  if [[ "${IP_MODE}" != "ipv6" ]]; then
    DEFAULT_GW="$(ip route | grep default | cut -f 3 -d" ")"
    ip addr add ${IPV4_CIDR} dev dind0
    ip route add default via ${DEFAULT_GW} dev dind0
  else  # IPv6 only
    DEFAULT_GW="$(ip -6 route | grep default | cut -f 3 -d" ")"
    IPV6_CIDR="$(ip addr show eth0 | grep -w inet6 | grep -i global | head -1 | awk '{ print $2; }')"
    IPV6="$(echo ${IPV6_CIDR} | sed 's,/.*,,')"
    ip addr del ${IPV6_CIDR} dev eth0
    ip addr add ${IPV6_CIDR} dev dind0
    if [[ ! -z "${DEFAULT_GW}" ]]; then
      # Must remove old route first (not deleted, when delete IP off of eth0, like with V4)
      ip -6 route del default via ${DEFAULT_GW} dev eth0
      ip -6 route add default via ${DEFAULT_GW} dev dind0
    fi
    ip -6 route add ${DNS64_PREFIX_CIDR} via ${LOCAL_NAT64_SERVER}
  fi
}

function dind::setup-config-file {
  if [[ ${IP_MODE} = "ipv6" ]]; then
    INSTANCE=`hostname | cut -d"-" -f 3`
    if [[ "${INSTANCE}" = "" ]]; then
      INSTANCE="10"
    fi
    echo "Instance: ${INSTANCE}"

    # FUTURE: Handle dual-stack mode
  
    NETWORK="$(echo $DEFAULT_GW | sed 's/[:][^:]*$/:/')"
    NETWORK_SIZE="$(echo ${IPV6_CIDR} | sed 's,.*/,,')"
    # Will use /80 for pod network
    HOST_MIN="${POD_NET_PREFIX}:${INSTANCE}::1"
    HOST_MAX="${POD_NET_PREFIX}:${INSTANCE}:ffff:ffff:ffff"
    DEFAULT_ROUTE="::/0"
  else
    # compute a network for the containers to live in
    # by adding CNI_BRIDGE_NETWORK_OFFSET to the current IP and cutting off
    # non-network bits according to CNI_BRIDGE_NETWORK_SIZE
    CNI_BRIDGE_NETWORK_SIZE="${CNI_BRIDGE_NETWORK_SIZE:-24}"
    NETWORK="$(ip route | grep dind0 | grep -v default | sed 's,/.*,,')"
    NETWORK_SIZE="$(echo ${IPV4_CIDR} | sed 's,.*/,,')"
  
    WILDCARD=$(ipcalc ${IPV4_CIDR} | grep Wildcard | awk '{print $2;}')
    IFS=. read -r i1 i2 i3 i4 <<< ${IPV4}
    IFS=. read -r n1 n2 n3 n4 <<< ${NETWORK}
    IFS=. read -r o1 o2 o3 o4 <<< ${CNI_BRIDGE_NETWORK_OFFSET}
    IFS=. read -r w1 w2 w3 w4 <<< ${WILDCARD}
  
    IP_PLUS_OFFSET=$(printf "%d.%d.%d.%d\n" \
                            "$(( n1 + ((i1 - n1 + o1) & w1) ))" \
                            "$(( n2 + ((i2 - n2 + o2) & w2) ))" \
                            "$(( n3 + ((i3 - n3 + o3) & w3) ))" \
                            "$(( n4 + ((i4 - n4 + o4) & w4) ))")
  
    HOST_MIN=$(ipcalc ${IP_PLUS_OFFSET}/${CNI_BRIDGE_NETWORK_SIZE} | grep HostMin | awk '{print $2;}')
    HOST_MAX=$(ipcalc ${IP_PLUS_OFFSET}/${CNI_BRIDGE_NETWORK_SIZE} | grep HostMax | awk '{print $2;}')
    DEFAULT_ROUTE="0.0.0.0/0"
  fi
  echo "Using ${HOST_MIN} .. ${HOST_MAX} for docker containers"
  CONFIG_FILE="/etc/cni/net.d/cni.conf"
  cat >${CONFIG_FILE} <<CFG_PREFIX_EOF
{
    "cniVersion": "0.3.0",
    "name": "dindnet",
    "type": "bridge",
    "bridge": "dind0",
    "hairpinMode": true,
    "ipam": {
        "type": "host-local",
        "subnet": "${NETWORK}/${NETWORK_SIZE}",
        "rangeStart": "${HOST_MIN}",
        "rangeEnd": "${HOST_MAX}",
        "gateway": "${DEFAULT_GW}",
        "routes": [
CFG_PREFIX_EOF
  if [[ ${IP_MODE} = "ipv6" ]]; then
      cat >>${CONFIG_FILE} <<CFG_IPV6_EOF
            { "dst": "${DNS64_PREFIX_CIDR}", "gw": "${LOCAL_NAT64_SERVER}"},
CFG_IPV6_EOF
  fi
  cat >>${CONFIG_FILE} <<CFG_SUFFIX_EOF
            { "dst": "${DEFAULT_ROUTE}" }
        ]
    }
}
CFG_SUFFIX_EOF
  echo "Config file created: ${CONFIG_FILE}"
}

function dind::make-kubelet-extra-dns-args {
  # Create drop-in file here, where we know the DNS IP.
  mkdir -p /etc/systemd/system/kubelet.service.d
  cat >/etc/systemd/system/kubelet.service.d/20-extra-dns-args.conf <<EOF
[Service]
Environment="KUBELET_DNS_ARGS=--cluster-dns=${DNS_SVC_IP} --cluster-domain=cluster.local"
EOF
  # Unconditionally set for both IPv4 and IPv6 mode
}


if [[ "${CNI_BRIDGE_NETWORK_OFFSET:-}" ]]; then
  dind::setup-bridge
  # TODO: Remove, once DinD is able to use v0.6.0 CNI release
  protocol=""
  if [[ ${IP_MODE} = "ipv6" ]]; then
      protocol="-6"
  fi
  curl -sSL ${protocol} --retry 5 https://github.com/containernetworking/plugins/releases/download/v0.6.0/cni-plugins-amd64-v0.6.0.tgz | \
      tar -C /opt/cni/bin -xz
  dind::setup-config-file
  dind::make-kubelet-extra-dns-args
fi

if [[ ${IP_MODE} = "ipv6" ]]; then
  sed -e "s/^${IPV4}/${IPV6}/g" /etc/hosts > /etc/hosts.updated
  cp /etc/hosts /etc/hosts.orig
  cat /etc/hosts.updated >/etc/hosts
  # Removed embedded docker DNS, as we'll only be using IPv6, which is already in resolv.conf
  sed "s/^nameserver.*127\.0\.0\.11/# Removed 127.0.0.11/" /etc/resolv.conf >/etc/resolv.conf.updated
  cp /etc/resolv.conf /etc/resolv.conf.orig
  cat /etc/resolv.conf.updated >/etc/resolv.conf
  echo "Setup completed"
  set +x
  while true; do
      sleep 1  # Keep service running, so actions not attempted multiple times
  done
else
  # make docker's kube-dns friendly
  old_ns="$(awk '/^nameserver/ {print $2; exit}' /etc/resolv.conf)"
  if [[ ${old_ns} ]]; then
    # sed -i doesn't work here because of docker's handling of /etc/resolv.conf
    sed "s/^nameserver.*/nameserver ${IPV4}/" /etc/resolv.conf >/etc/resolv.conf.updated
    cp /etc/resolv.conf /etc/resolv.conf.orig
    cat /etc/resolv.conf.updated >/etc/resolv.conf
    while true; do
      socat udp4-recvfrom:53,reuseaddr,fork,bind=${IPV4} UDP:${old_ns}:53 || true
      echo "WARNING: restarting socat" >&2
    done
  else
    echo "WARNING: couldn't get nameserver" >&2
    exit 1
  fi
fi
